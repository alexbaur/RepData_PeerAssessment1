View(ACS3.csv)
View("ACS")
View(ACS)
ACSlower <- tolower(names(ACS))
splitNames <- strsplit(ACS, "[Ww][Gg][Tt][Pp]")
ACSlower <- tolower(as.numeric(names(ACS)))
ACSlower <- tolower(as.character(names(ACS)))
splitNames <- strsplit(ACSlower, "wgtp")
splitNames[123]
splitNames[123] <- Q1
Q1 <- splitNames[123]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "GDP3.csv")
GDP <- read.csv(GDP3.csv)
GDP <- read.csv("GDP3.csv")
View(GDP)
gsub(",", "", GDP$X.3)
GDPno <- gsub(",", "", GDP$X.3)
View(GDPno)
View("GDPno")
mean(GDPno)
class(GDPno)
mean(as.numeric(GDPno))
mean(as.numberic(GDPno), rm.na = TRUE)
mean(as.numeric(GDPno), rm.na = TRUE)
?mean
mean(as.numeric(GDPno), na.rm = TRUE)
gdpno
GDPno
GDPno <- subset(GDPno, 4:328)
?subste
?subset
GDPno <- subset(GDPno, select = 4:326)
?rm
GDPno[1:50]
GDPno <- rm(GDPno[1:4])
GDPno <- rm("", GDPno)
mean(GDPno)
mean(GDPno, na.rm = TRUE)
GDPno <- GDPno(na.rm = True)
class(GDPno)
GDPno <- as.numeric(GDPno)
View(GDPno)
GDPnoNA <- remove("NA", list = GDPno)
warnings()
rm(GDPnoNA)
class(GDPno)
mean(GDPno)
mean(GDPno, na.rm = TRUE)
GDPno <- GDPno[!is.na(GDPno)]
view(GDPno)
View(GDPno)
mmean(GDPno))
mean(GDPno)
1453710 *2
?average
??average
mean(GDPno)
gdp <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", header = FALSE, stringsAsFactors = FALSE, skip=5, nrows=190)
x <- gsub(",| ", "", gdp$V5)
y <- as.numeric(x)
mean(y)
Q2 <- 377652.4
read.csv(GDP3.csv)
View(GDP)
grep("^United",countryNames), 3
grep("^United",countryNames)
?rename
??rename
library(plyr)
library(dplyr)
GDP <- rename(GDP, X.2 = countryNames)
select(GDP, X.2 = countryNames)
GDP <- rename(GDP, cpuntryNames = X.2)
GDP <- rename(GDP, countryNames = X.2)
GDP <- rename(GDP, countryNames = cpuntryNames)
grep("^United",countryNames)
grep("^United", GDP$countryNames)
grep("United$",GDP$countryNames)
grep("*United",GDP$countryNames)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "EDU2.csv")
GDP <- subset(GDP, col(1:5))
GDP <- na.omit(GDP)
GDP <- read.csv(GDP3.csv)
GDP <- read.csv("GDP3.csv")
GDP <- subset(GDP, select -[6:10])
?apply
GDP <- GDP(c[1:5])
GDP <- GDP[c(1:5)]
View(EDU2.csv)
View"EDU2.csv"
View("EDU2.csv")
View(EDU2.csv)
EDU <- read.csv(EDU2.csv)
EDU <- read.csv("EDU2.csv")
View(EDU2.csv)
View("EDU2.csv")
View(EDU)
GDP <- GDP[-1:4,]
GDP <- GDP[, -1:4]
GDP <- GDP[,c(1:5)]
GDP <- GDP[c(1:5),]
View(GDP)
GDP <- read.csv("GDP3.csv")
View(GDP)
GDP <- GDP[c(1:5)]
GDP <- GDP[,-c(1:4)]
View(GDP)
data.frame(GDP)
GDP <- data.frame(GDP)
View(GDP)
GDP <- read.csv("GDP3.csv")
GDP <- GDP[,-c(1:4)]
View(GDP)
GDP <- read.csv("GDP3.csv")
GDP <- GDP[-1:4]
GDP <- GDP[-c(1:4)]
View(GDP)
GDP <- read.csv("GDP3.csv")
GDP <- GDP[,-c(1:4)]
GDP <- read.csv("GDP3.csv")
GDP <- GDP[-c(1:4),]
GDP <- GDP[,-c(6:10)]
View(GDP)
?rbind
?merge
merge(GDP, EDU, by.x = X, by.y = CountryCode)
GDP <- rename(GDP, CountryCode = X)
View(GDP)
merge(GDP, EDU, by.x = CountryCode, by.y = CountryCode)
class(GDP$CountryCode)
GDP <- as.character(GDP$CountryCode)
merge(GDP, EDU, by.x = CountryCode, by.y = CountryCode)
class(EDU$CountryCode)
EDU <- as.character(EDU$CountryCode)
class(EDU$CountryCode)
class(CountryCode)
class(names(EDU))
View(EDU)
View(GDP)
GDP
View(EDU)
View(GDP)
GDP <- read.csv("GDP3.csv")
GDP <- GDP[-c(1:4),]
GDP <- GDP[,-c(6:10)]
View(GDP)
EDU <- read.csv("EDU2.csv")
View(EDU)
merge(GDP, EDU, by.x = GDP$X, by.y = EDU$CountryCode)
merge(GDP, EDU, by.x = GDP[1], by.y = EDU[1])
merge(GDP, EDU, by.x = "X", by.y = "CountryCode")
GDPEDU <- merge(GDP, EDU, by.x = "X", by.y = "CountryCode")
View(GDPEDU)
Q3 <- grep("^United",countryNames)
Q3 <- "grep("^United",countryNames)"
match(GDPEDU, GDPEDU$Special.Notes([Jj][Uu][Nn][Ee]))
grepl("[Jj][Uu][Nn][Ee]", GDPEDU$Special.Notes)
count(grepl("[Jj][Uu][Nn][Ee]", GDPEDU$Special.Notes))
z <- (TRUE, FALSE< NA)
z <- sum(True, False, NA)
Z <- c(TRUE, FALSE, NA)
rm(z)
rm(Z)
length(Z[Z==TRUE])
g <- grepl("[Jj][Uu][Nn][Ee]", GDPEDU$Special.Notes)
sum(g==TRUE)
Q4 <- sum(g==TRUE)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(sampleTimes)
AMZN <- read.csv("sampleTimes")
AMZN <- read.csv(sampleTimes)
data.frame(sampleTimes)
AMZN <-data.frame(sampleTimes)
view(AMZN)
View(AMZN)
format(AMZN, "%Y-%m-%d")
AMZN[1]
format(AMZN, "%Y %m %d")
AMZN <- format(AMZN, "%Y %m %d")
format(AMZN, "%Y %m %a")
AMZN <- format(AMZN, "%Y %m %a")
AMZN
View(AMZN)
format(AMZN, "%Y %m %d")
AMZN <- format(AMZN, "%Y %m %d")
AMZN
weekdays(AMZN)
?lubridate
??lubridate
library(lubridate)
ymd(AMZN)
AMZN <-data.frame(sampleTimes)
ymd(AMZN)
Vectorize(AMZN)
ymd(AMZN)
AMZN
AMZN <-data.frame(sampleTimes)
parse_date_time(AMZN)
class(sampleTimes)
format(sampleTimes, "%Y-%m-%d")
AMZN <- format(sampleTimes, "%Y-%m-%d")
count(where[sampleTimes == ("2012")])
count(sampleTimes, )
count
format(sampleTimes, "%Y %b %a")
AMZN <- format(sampleTimes, "%Y %b %a")
AMZN[1]
AMZN1 <- table(sampleTimes)
grep("^2012")
?grep
grep("^2012", sampleTimes)
z <- grep("^2012", sampleTimes)
length(z)
z
do.call(rbind, lapply(split(sampleTimes, substring(sampleTimes, 1, 4)), function(x) {
table(weekdays(x))
}))
length(Q4)
Q4
g <- grepl("[Jj][Uu][Nn][Ee]", GDPEDU$Special.Notes)
g
GDP
View(GDPEDU)
source("InverseMatrixCache.R")
matrix1 <- makeCacheMatrix((matrix(1:4,2,2)))
matrix1$get()
matrix1$getinverse()
cacheSolve(matrix1)
cacheSolve(mmatrix1)
cacheSolve(matrix1)
cacheSolve(matrix1)
source("InverseCacheMatrix.R")
source("InverseMatrixCache.R")
cacheSolve(matrix1)
source("InverseMatrixCache.R")
cacheSolve(matrix1)
cacheSolve(matrix1)
source("InverseMatrixCache.R")
cacheSolve(matrix1)
source("InverseMatrixCache.R")
matrix1 <- makeCacheMatrix(matrix(1:4, 2, 2))
matrix1$get()
matrix1$getinverse()
cacheSolve(matrix1)
source("InverseMatrixCache.R")
matrix1 <- makeCacheMatrix(matrix(1:4, 2, 2))
matrix1$get()
matrix1$getinverse()
cacheSolve(matrix1)
source("InverseMatrixCache.R")
matrix1 <- makeCacheMatrix(matrix(1:4, 2, 2))
matrix1$get()
matrix1$getinverse()
cacheSolve(matrix1)
matrix1$getinverse()
matrix1 <- makeCacheMatrix(matrix(c(2,2,1,4),2,2)
)
matrix1$get()
matrix1$getinverse()
cacheSolve(matrix1)
matrix1$getinverse()
library(iris)
library(datasets)
iris
View(iris)
library(plyr)
?plyr
library(dplyr)
?plyr
library(twitteR)
?twitterR
??twitter
load("C:/Users/alexb/Desktop/Coursera/GACDProject/UCI HAR Dataset/.RData")
rm(matrix1)
rm(cacheSolve)
rm(makeCacheMatrix)
library(plyr)
tidy <- aggregate(. ~subject + activity, combined_mean_std, mean)
tidy <- aggregate(. ~subject_number + Activity_type, combined_mean_std, mean)
View(tidy)
tidy <- tidy[order(tidy$subject_number,tidy$Activity_type)]
tidy <- tidy[order(tidy$subject_number,tidy$Activity_type),]
write.table(tidy, file = "tidydata.txt", row.name=FALSE)
tidydata
view(tidy)
View(tidy)
str(tidy)
summary(tidy)
dim(tidy)
class(tidy$subject_number)
tidy$`TimeBodyGyroscopeMean()-Z`
class(Activity_type)
class(tidy$Activity_type)
class(tidy$`TimeBodyAccelerometerStdDev()-X`
)
class(tidy$`TimeBodyAccelerometerJerkMagnitudeStdDev()`)
names(tidy)
?rbind
save.image("C:/Users/alexb/Desktop/Coursera/GACDProject/GACDprojectenv.R.RData")
sample(points)
exaple(points)
example(points)
?Sweave
install.packages("knitr")
install.packages("kernlab")
library(kernlab)
data(spam)
View(spam)
head(spam)
summary(spam)
str(spam)
library(ggplot2)
str(mpg)
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets =.~drv)
qplot(displ, hwy, data = mpg, facets =.~drv, pch = 20)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, Bodyweight)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
view(airquality)
View(airquality)
?par()
?trellis.par.set()
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
pnorm(70, mean = 80, sd = 10, lower.tail = FALSE)
qnorm(.95, mean = 1100, sd = 75)
ppois(10, lambda = 5*3)
choose(5,4) *.5^5 +choose(5,5)*.5^8
pnorm
pnorm(.95, mean = 1100, sd = 75, lower.tail = FALSE)
qnorm(.95, mean = 1100, sd = 75)
?qnorm
pnorm(14, mean = 15, sd = 10)
pnorm(16, mean = 15, sd = 10)
pnorm((16-15)/(10/sqrt(100)))-pnorm((14-15)/(10/sqrt(100)))
install.packages("reshape2")
?t.test
t.test(1,100, conf.level = 0.95, sd = 30)
t.test(9, mean = 1,100, conf.level = 0.95, sd = 30)
t.test(mean = 1,100, conf.level = 0.95, sd = 30)
t.test(1100, conf.level = 0.95, sd = 30)
t.test(9, mu = 1100, conf.level = 0.95, sd = 30)
g <- c(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100)
t.test(g, mu = 1100, conf.level = 0.95, sd = 30)
qt(p=.95+(1-.95)/2)
qt(p=.95+(1-.95)/2, df=8)
qt(p=.95+(1-.95)/2, df=9)
?qt
n1 = 10
rm(g)
m1 = 5
var1=.68
n2 = 10
m2 = 3
var2 =0.60
s1 <- sqrt(((n1-1)*var1+(n2-1)*var2)/(n1+n2-2))
c <- (m2-m1)+c(-1,1)*qt(0=.975, df = (n1+n2-2))*s1*(1/n1+1/n2)
c <- (m2-m1)+c(-1,1)*qt(0=.975, df=(n1+n2-2))*s1*(1/n1+1/n2)
c <- (m2-m1)+c(-1,1)*qt(p=.975, df=(n1+n2-2))*s1*(1/n1+1/n2)
c
s1 <- sqrt(((n1-1)*var1+(n2-1)*var2)/(n1+n2-2))
c <- (m2-m1)+c(-1,1)*qt(p=.975, df=(n1+n2-2))*s1*(1/n1+1/n2)
c
sp<- sqrt(   ( (n1-1)*var1+(n2-1)*var2 ) / (n1+n2-2)   )
ci<-(m2-m1) + c(-1,1)*qt(p=.975, df=(n1+n2-2))*sp*sqrt(1/n1 + 1/n2)
ci
n1 = 9
m1 = 3
m1=-3
s1 = 1.5
n2=9
m2=1
s2=1.8
sp <- sqrt( ((n1-1)*s1^2+(n2-1)*s2^2)/(n1+n2-2)
)
c<-(m1-m2) + c(-1,1)*qt(p=.90+(1-.90)/2, df=(n1+n2-2))*sp*sqrt(1/n1 + 1/n2)
setwd("~/GitHub/RepData_PeerAssessment1/activity")
activity <- read.csv("activity.csv")
str(activity)
activity2 <- as.Date(activity$date, format = "%Y-%m-%d")
library(plyr)
library(dplyr)
activity2 <- data.frame(activity2)
activity <- cbind(activity, activity2)
activity <- select(activity, steps, activity2, interval)
colnames(activity)[colnames(activity)=="activity2"] <- "Date"
colnames(activity)[colnames(activity)=="steps"] <- "Steps"
colnames(activity)[colnames(activity)=="interval"] <- "Interval"
str(activity)
steps1 <- aggregate(activity$Steps ~ activity$Date, na.omit = TRUE, FUN = sum)
names(steps1) <- c("Date", "Steps")
length(steps1$Steps)
hist(steps1$Steps, col = "black", xlab = "Number of Steps per Day", main = "Total Steps per Day", breaks = 53)
mean1 <- mean(steps1$Steps)
median1 <- median(steps1$Steps)
mean1
median1
intervalmean <- aggregate(activity$Steps ~ activity$Interval, na.omit = TRUE, FUN = mean)
names(intervalmean) <- c("Interval", "Average_Steps")
plot(intervalmean$Interval, intervalmean$Average_Steps, type="l", xlab = "Interval (minutes)", ylab = "Average Steps", main = "Average Steps For All Days per 5-Minute Intervals")
intervalmean$Interval[which.max(intervalmean$Average_Steps)]
nacount <- sum(is.na(activity$Steps))
nacount
activityna <- activity
nareplace <- data.frame(Date=activityna$Date[is.na(activityna$Steps)], Interval = activityna$Interval[is.na(activityna$Steps)], Steps=intervalmean[match(intervalmean$Interval, activityna$Interval[is.na(activityna$Steps)]),2])
View(head(nareplace))
activityna <- subset(activityna, !is.na(activityna$Steps))
activityna <- rbind(activityna, nareplace)
aggsteps <- aggregate(activityna$Steps ~activityna$Date, FUN = sum, na.rm = TRUE)
names(aggsteps) <- c("Date", "Steps")
mean2 <- mean(aggsteps$Steps)
median2 <- median(aggsteps$Steps)
mean2
median2
mean1-mean2
median1-median2
hist(aggsteps$Steps, col = "black", xlab = "Number of Steps per Day", main = "Total Steps per Day", breaks = 53)
hist(steps1$Steps, col = "black", xlab = "Number of Steps per Day", main = "Total Steps per Day", breaks = 53)
install.packages("timeDate")
?timedate
?timeDate
??timeDate
DOW <- function(DOW){
if (weekdays(as.Date(DOW)) %in% c("Saturday" | "Sunday"))
{"Weekend"} else {"Weekday"}
}
activity[, 4] <- as.factor(DOW(activity$Date)[, 4])
activity[, 4] <- as.factor(DOW(activity$Date))
activity[, 4] <- as.factor(sapply(activity$Date, DOW))
class(activity$Date)
activity$DayofWeek <- as.factor(sapply(activity$Date, DOW))
DOW <- function(DOW){
if (weekdays(as.Date(DOW)) %in% c("Saturday", "Sunday"))
{"Weekend"} else {"Weekday"}
}
activity[, 4] <- as.factor(sapply(activity$Date, DOW))
View(head(activity))
View(activity)
names(activity$V4) <- "Weekend or Weekday"
View(activity)
colnames(activity)[colnames(activity)=="V4"] <- "Weekend or Weekday"
plot(activity[activity$`Weekend or Weekday` == "Weekday"], lines(activity$Steps ~ activity$Interval, type ="l"))
plot(activity[activity$`Weekend or Weekday` == "Weekday",], lines(activity$Steps ~ activity$Interval, type ="l"))
plot(activity[activity$`Weekend or Weekday` == "Weekend",], lines(activity$Steps ~ activity$Interval, type ="l"))
par(mfrow = c(2,1))
plot(activity[activity$`Weekend or Weekday` == "Weekday",], lines(activity$Steps ~ activity$Interval, type ="l"))
plot(activity[activity$`Weekend or Weekday` == "Weekend",], lines(activity$Steps ~ activity$Interval, type ="l"))
par(mfrow = c(2,1))
for (type in c("Weekend", "weekday")){
DOWsteps <- aggregate(activity$Steps ~ activity$Interval, subset == activity$`Weekend or Weekday`, FUN = mean)
plot(DOWsteps, type = "l", main = type)
}
par(mfrow = c(2,1))
for (type in c("Weekend", "weekday")){
DOWsteps <- aggregate(Steps ~ Interval, subset == activity$`Weekend or Weekday`, FUN = mean)
plot(DOWsteps, type = "l", main = type)
}
par(mfrow = c(2,1))
for (type in c("Weekend", "weekday")){
DOWsteps <- aggregate(Steps ~ Interval, subset == activity$`Weekend or Weekday` == type, FUN = mean)
plot(DOWsteps, type = "l", main = type)
}
par(mfrow = c(2,1))
for (type in c("Weekend", "weekday")){
DOWsteps <- aggregate(Steps ~ Interval, data = activity, subset == activity$`Weekend or Weekday` == type, FUN = mean)
plot(DOWsteps, type = "l", main = type)
}
par(mfrow = c(2,1))
for (type in c("Weekend", "weekday")){
DOWsteps <- aggregate(Steps ~ Interval, data = activity, subset == activity$`Weekend or Weekday` == type, FUN = mean)
}
plot(DOWsteps, type = "l", main = type)
par(mfrow = c(2,1))
for (type in c("Weekend", "weekday")){
DOWsteps <- aggregate(Steps ~ Interval, data = activity, subset = activity$`Weekend or Weekday` == type, FUN = mean)
plot(DOWsteps, type = "l", main = type)
}
activity[, 4] <- as.factor(sapply(activity$Date, DOW))
colnames(activity)[colnames(activity)=="V4"] <- "Weekend_or_Weekday"
View(head(activity))
activity[, 4] <- as.factor(sapply(activity$Date, DOW))
View(activity)
colnames(activity)[colnames(activity)=="Weekend or Weekday"] <- "Weekend_or_Weekday"
View(activity)
par(mfrow = c(2,1))
for (type in c("Weekend", "weekday")){
DOWsteps <- aggregate(Steps ~ Interval, data = activity, subset = activity$Weekend_or_Weekday == type, FUN = mean)
plot(DOWsteps, type = "l", main = type)
}
par(mfrow = c(2,1))
for (type in c("Weekend", "Weekday")){
DOWsteps <- aggregate(Steps ~ Interval, data = activity, subset = activity$Weekend_or_Weekday == type, FUN = mean)
plot(DOWsteps, type = "l", main = type)
}
setwd("~/GitHub/RepData_PeerAssessment1/activity")
?ppllot
?plot
